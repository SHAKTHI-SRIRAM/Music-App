{"version":3,"sources":["SidebarOption.jsx","DataLayer.js","Sidebar.jsx","axios.js","Row.jsx","Body.jsx","Player.jsx","App.js","serviceWorker.js","Reducer.js","index.js"],"names":["SidebarOption","title","Icon","className","DataLayerContext","createContext","DataLayer","reducer","initialState","children","Provider","value","useReducer","useDataLayerValue","useContext","Sidebar","playing","songID","songName","useState","song","setSong","isPlaying","setIsPlaying","setName","useEffect","HomeIcon","LibraryMusicIcon","videoId","opts","height","width","playerVars","autoplay","instance","axios","create","baseURL","Row","fetchUrl","dispatch","rowSongs","setRowSongs","a","get","request","data","fetchData","map","src","posteruri","alt","onClick","songname","name","videoID","songid","console","log","type","handleClick","artist","Body","songs","Player","spotify","SpotifyWebApi","App","Boolean","window","location","hostname","match","state","action","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kYAaeA,MATf,YAAuC,IAAfC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,KAC3B,OACI,yBAAKC,UAAU,iBACVD,GAAQ,kBAACA,EAAD,CAAMC,UAAU,uBACxBD,EAAO,4BAAKD,GAAc,2BAAIA,K,kCCN9BG,EAAmBC,0BAEnBC,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAAcC,EAA1B,EAA0BA,SAA1B,OACrB,kBAACL,EAAiBM,SAAlB,CAA2BC,MAAOC,qBAAWL,EAASC,IACjDC,IAIII,EAAoB,kBAAMC,qBAAWV,I,QCwCnCW,MA1Cf,WAAoB,IAAD,EACiCF,IADjC,0BACPG,EADO,EACPA,QAASC,EADF,EACEA,OAAQC,EADV,EACUA,SADV,QAESC,mBAAS,KAFlB,mBAERC,EAFQ,KAEFC,EAFE,OAGmBF,oBAAS,GAH5B,mBAGRG,EAHQ,KAGGC,EAHH,OAISJ,mBAAS,IAJlB,mBAIFK,GAJE,WAoBf,OANAC,qBAAU,WACNJ,EAAQJ,GACRO,EAAQN,GACRK,EAAaP,KACd,CAACA,EAASC,EAAQC,IAGrB,yBAAKf,UAAU,WAEX,yBAAKA,UAAU,SACf,4BACI,0BAAMA,UAAU,QAAhB,UACA,0BAAMA,UAAU,SAAhB,WAGJ,kBAAC,EAAD,CAAeF,MAAM,OAAOC,KAAMwB,MAClC,kBAAC,EAAD,CAAezB,MAAM,eAAeC,KAAMyB,MAC1C,6BACA,4BAAQxB,UAAU,iBAAlB,eACA,6BACA,6BACA,6BACCmB,GAAa,kBAAC,IAAD,CAASM,QAASR,EAAMS,KA9B7B,CACTC,OAAQ,MACRC,MAAO,OACPC,WAAY,CACRC,SAAU,Q,+CCZPC,E,OAJEC,EAAMC,OAAO,CAC1BC,QAAS,8BCgFEC,MA7Ef,YAAiC,IAAnBrC,EAAkB,EAAlBA,MAAOsC,EAAW,EAAXA,SAAW,EACoB1B,IADpB,0BACpBG,EADoB,EACpBA,QAAiBE,GADG,EACXD,OADW,EACHC,UAAWsB,EADR,OAEIrB,qBAFJ,mBAErBsB,EAFqB,KAEXC,EAFW,KA0D5B,OAtDAjB,qBAAU,WAAM,4CACZ,4BAAAkB,EAAA,sEAC0BR,EAAMS,IAAIL,GADpC,cACUM,EADV,OAGIH,EAAYG,EAAQC,MAHxB,kBAIWD,GAJX,4CADY,uBAAC,WAAD,wBAOZE,KACD,IA+CC,yBAAK5C,UAAU,OACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAcF,GAC5B,yBAAKE,UAAU,cACVsC,GAAYA,EAASO,KAAI,SAAA5B,GAAI,OAC1B,yBAAKjB,UAAU,QACX,yBAAK8C,IAAK7B,EAAK8B,UAAWC,IAAI,GAAGC,QAAS,kBAjD9C,SAAChC,GACjB,IAAMiC,EAAWjC,EAAKkC,KAChBC,EAAUnC,EAAKoC,OACrBC,QAAQC,IAAIH,EAASrC,GACjBF,GACAwB,EAAS,CACLmB,KAAM,cACN3C,SAAS,IAGbwB,EAAS,CACLmB,KAAM,eACNzC,SAAUmC,IAEdb,EAAS,CACLmB,KAAM,aACN1C,OAAQsC,IAEZf,EAAS,CACLmB,KAAM,cACN3C,SAAS,MAMbwB,EAAS,CACDmB,KAAM,eACNzC,SAAUA,IAElBsB,EAAS,CACLmB,KAAM,aACN1C,OAAQsC,IAEZf,EAAS,CACLmB,KAAM,cACN3C,SAAS,KAamD4C,CAAYxC,MAC5D,wBAAIjB,UAAU,cAAciB,EAAKkC,MACjC,uBAAGnD,UAAU,cAAciB,EAAKyC,gBCnC7CC,MA/Bf,WAAiB,IAAD,EACgBjD,IADhB,mBACI2B,GADJ,KACJuB,MADI,MAkBZ,OAfAtC,qBAAU,WAAM,4CACZ,4BAAAkB,EAAA,sEAC0BR,EAAMS,MADhC,cACUC,EADV,OAGIL,EAAS,CACLmB,KAAM,YACNI,MAAOlB,EAAQC,OALvB,kBAOWD,GAPX,4CADY,uBAAC,WAAD,wBAUZE,KACD,IAKC,yBAAK5C,UAAU,QAGX,kBAAC,EAAD,CAAKF,MAAM,kBAAkBsC,SAAS,sBACtC,kBAAC,EAAD,CAAKtC,MAAM,YAAYsC,SAAS,oBAChC,kBAAC,EAAD,CAAKtC,MAAM,iBAAiBsC,SAAS,oBACrC,kBAAC,EAAD,CAAKtC,MAAM,YAAYsC,SAAS,oB,sCCf7ByB,MAXf,YAA4B,IAAXC,EAAU,EAAVA,QACb,OACI,yBAAK9D,UAAU,UACX,yBAAKA,UAAU,eACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAM8D,QAASA,O,QCJf,I,OAAIC,GAWLC,MATf,WAEE,OACE,yBAAKhE,UAAU,OACb,kBAAC,EAAD,QCDciE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCsBSjE,EAhCC,SAACkE,EAAOC,GAEpB,OADAjB,QAAQC,IAAIgB,GACJA,EAAOf,MACX,IAAK,aACD,OAAO,2BACAc,GADP,IAEIxD,OAAQyD,EAAOzD,SAGvB,IAAK,cACD,OAAO,2BACAwD,GADP,IAEIzD,QAAS0D,EAAO1D,UAGxB,IAAK,eACD,OAAO,2BACAyD,GADP,IAEIvD,SAAUwD,EAAOxD,WAGzB,IAAK,YACD,OAAO,2BACAuD,GADP,IAEIV,MAAOW,EAAOX,QAGtB,QACI,OAAOU,IC5BnBE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAWrE,aDTa,CACxBQ,SAAS,EACTC,OAAQ,GACRC,SAAU,GACV6C,MAAO,ICKgCxD,QAASA,GAChD,kBAAC,EAAD,QAGFuE,SAASC,eAAe,SFqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.24c2b46d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SidebarOption.css';\r\n\r\n\r\nfunction SidebarOption({title, Icon}) {\r\n    return (\r\n        <div className=\"sidebarOption\">\r\n            {Icon && <Icon className='sidebarOption_icon' />}\r\n            {Icon ? <h4>{title}</h4> : <p>{title}</p>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SidebarOption\r\n","import React, { createContext, useContext, useReducer } from \"react\";\r\n\r\nexport const DataLayerContext = createContext();\r\n\r\nexport const DataLayer = ({ reducer, initialState, children }) => (\r\n    <DataLayerContext.Provider value={useReducer(reducer, initialState)}>\r\n        {children}\r\n    </DataLayerContext.Provider>\r\n);\r\n\r\nexport const useDataLayerValue = () => useContext(DataLayerContext);","import React, {useEffect, useState} from 'react';\r\nimport './Sidebar.css';\r\nimport SidebarOption from './SidebarOption';\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport LibraryMusicIcon from \"@material-ui/icons/LibraryMusic\";\r\nimport {useDataLayerValue} from './DataLayer';\r\nimport YouTube from 'react-youtube';\r\n\r\nfunction Sidebar() {\r\n    const [{playing, songID, songName}, dispatch] = useDataLayerValue();\r\n    const [song, setSong] = useState(\"\");\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [name, setName] = useState(\"\");\r\n\r\n    const opts = {\r\n        height: \"170\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            autoplay: 1,\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setSong(songID);\r\n        setName(songName);\r\n        setIsPlaying(playing);\r\n    }, [playing, songID, songName])\r\n\r\n    return (\r\n    <div className=\"sidebar\">\r\n        \r\n        <div className=\"title\">\r\n        <h1>\r\n            <span className=\"acme\">Cookie</span>\r\n            <span className=\"sofia\">Music</span>\r\n        </h1>\r\n        </div>\r\n        <SidebarOption title=\"Home\" Icon={HomeIcon} />\r\n        <SidebarOption title=\"Your Library\" Icon={LibraryMusicIcon} />\r\n        <br />\r\n        <strong className=\"sidebar_title\">NOW PLAYING</strong>\r\n        <hr />\r\n        <br/>\r\n        <br/>\r\n        {isPlaying && <YouTube videoId={song} opts={opts} />}\r\n\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Sidebar\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"http://localhost:8000/api\",\r\n});\r\n\r\nexport default instance;","import React, {useEffect, useState} from 'react';\r\nimport './Row.css';\r\nimport { useDataLayerValue } from \"./DataLayer\";\r\nimport axios from './axios';\r\n\r\n\r\nfunction Row({title, fetchUrl}) {\r\n    const [{playing, songID, songName}, dispatch] = useDataLayerValue();\r\n    const [rowSongs, setRowSongs] = useState();\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            // console.log(request.data);\r\n            setRowSongs(request.data);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [])\r\n\r\n    // console.log(rowSongs)\r\n\r\n    const handleClick = (song) => { \r\n        const songname = song.name\r\n        const videoID = song.songid\r\n        console.log(videoID, songName)\r\n        if (playing) {\r\n            dispatch({\r\n                type: \"SET_PLAYING\",\r\n                playing: false,\r\n            })\r\n            \r\n            dispatch({\r\n                type: \"SET_SONGNAME\",\r\n                songName: songname,\r\n            })\r\n            dispatch({\r\n                type: \"SET_SONGID\",\r\n                songID: videoID,\r\n            })\r\n            dispatch({\r\n                type: \"SET_PLAYING\",\r\n                playing: true,\r\n            })\r\n                    \r\n                \r\n            \r\n        } else {\r\n            dispatch({\r\n                    type: \"SET_SONGNAME\",\r\n                    songName: songName,\r\n                })\r\n            dispatch({\r\n                type: \"SET_SONGID\",\r\n                songID: videoID,\r\n            })\r\n            dispatch({\r\n                type: \"SET_PLAYING\",\r\n                playing: true,\r\n            })\r\n        }\r\n    } \r\n\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"row__body\">\r\n                <h1 className=\"row__title\">{title}</h1>\r\n                <div className=\"row__songs\">\r\n                    {rowSongs && rowSongs.map(song => (\r\n                        <div className=\"song\">\r\n                            <img src={song.posteruri} alt=\"\" onClick={() => handleClick(song)}/>\r\n                            <h6 className=\"song__name\">{song.name}</h6>\r\n                            <p className=\"song__info\">{song.artist}</p>\r\n                        </div>\r\n                    ))}\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","import React, {useEffect, useState} from 'react';\r\nimport './Body.css';\r\nimport Row from './Row';\r\nimport { useDataLayerValue } from \"./DataLayer\";\r\nimport axios from './axios';\r\n\r\n\r\nfunction Body() {\r\n    const [{songs}, dispatch] = useDataLayerValue();\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get();\r\n            // console.log(request.data);\r\n            dispatch({\r\n                type: \"SET_SONGS\",\r\n                songs: request.data,\r\n            })\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [])\r\n\r\n    // console.log(songs)\r\n\r\n    return (\r\n        <div className='body'>\r\n            {/* <Header /> */}\r\n\r\n            <Row title=\"Love and Unlove\" fetchUrl=\"?category=Romance\" />\r\n            <Row title=\"Top Tamil\" fetchUrl=\"?language=Tamil\" />\r\n            <Row title=\"Bollywood Bang\" fetchUrl=\"?language=Hindi\" />\r\n            <Row title=\"Sad times\" fetchUrl=\"?category=Sad\" />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Body\r\n","import React from 'react'\r\nimport './Player.css';\r\nimport Sidebar from \"./Sidebar.jsx\";\r\nimport Body from \"./Body\";\r\nimport Footer from \"./Footer\";\r\n\r\nfunction Player({spotify}) {\r\n    return (\r\n        <div className=\"player\">\r\n            <div className=\"player-body\">\r\n                <Sidebar />\r\n                <Body spotify={spotify} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Player","import React from \"react\";\nimport './App.css';\n\nimport Player from \"./Player\";\n\nimport SpotifyWebApi from \"spotify-web-api-js\";\n\nconst spotify = new SpotifyWebApi();\n\nfunction App() {\n\n  return (\n    <div className=\"app\">\n      <Player />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nexport const initialState = {\r\n    playing: false,\r\n    songID: \"\",\r\n    songName: \"\",\r\n    songs: [],\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    console.log(action);\r\n    switch (action.type) {\r\n        case \"SET_SONGID\":\r\n            return {\r\n                ...state,\r\n                songID: action.songID,\r\n            };\r\n\r\n        case \"SET_PLAYING\":\r\n            return {\r\n                ...state,\r\n                playing: action.playing,\r\n            };\r\n\r\n        case \"SET_SONGNAME\":\r\n            return {\r\n                ...state,\r\n                songName: action.songName,\r\n            };\r\n\r\n        case \"SET_SONGS\":\r\n            return {\r\n                ...state,\r\n                songs: action.songs,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer ,{initialState} from './Reducer';\nimport {DataLayer} from './DataLayer';\n\nReactDOM.render(\n  <React.StrictMode>\n    <DataLayer initialState={initialState} reducer={reducer}>\n    <App />\n    </DataLayer>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}